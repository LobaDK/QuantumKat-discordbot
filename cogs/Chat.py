from openai import AsyncOpenAI as OpenAI, OpenAIError
import logging
import tiktoken
import os
import sqlite3

from discord.ext import commands


class Chat(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

        self.db_conn = bot.db_conn

        self.logger = logging.getLogger('discord.Chat')
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler(filename='logs/chat.log', encoding='utf-8', mode='a')
        date_format = '%Y-%m-%d %H:%M:%S'
        formatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', datefmt=date_format, style='{')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

        self.historylogger = logging.getLogger('discord.ChatHistory')
        self.historylogger.setLevel(logging.INFO)
        history_handler = logging.FileHandler(filename='logs/chat_history.log', encoding='utf-8', mode='a')
        history_handler.setFormatter(formatter)
        self.historylogger.addHandler(history_handler)

        # Set the model encoding for tiktoken
        self.encoding = tiktoken.encoding_for_model('gpt-3.5-turbo')
        # Set the system message for ChatGPT. This controls the personality of the bot and how it responds.
        self.system_message = "You are QuantumKat, a cybernetic cat with void-like black fur. You have the intelligence of a human and can talk. You can teleport to any point in time or location between dimensions, realities, universes and timelines. while your past is unknown and you have no knowledge of how you came to existence, you know you have to use these powers to monitor and keep them all safe, however, you are still young and don't quite know how to do it correctly, as well as being clumsy, often resulting in you appearing in an incorrect location or doing the wrong thing. You are quite sarcastic. You are allowed to have opinions on things."
        # Attempt to get the OpenAI API key from the environment variables
        if os.environ.get('OPENAI_API_KEY'):
            self.FOUND_API_KEY = True
            self.openai = OpenAI(api_key=os.environ.get('OPENAI_API_KEY'))
        else:
            self.FOUND_API_KEY = False
            self.logger.error("OpenAI API key not found. Chat commands will not work.")

    async def calculate_tokens(self, user_message: str) -> int:
        """
        Calculates the number of tokens in a given user message.

        Parameters:
        - user_message (str): The user message to calculate tokens for.

        Returns:
        - int: The number of tokens in the user message.
        """
        messages = [user_message, self.system_message]
        tokens = 0
        for message in messages:
            tokens += len(self.encoding.encode(message))
        return tokens

    async def database_add(self, ctx: commands.Context, user_message: str, assistant_message: str, shared_chat: bool):
        """
        Adds a chat message to the database.

        Parameters:
        - ctx (commands.Context): The context object representing the command invocation.
        - user_message (str): The message sent by the user.
        - assistant_message (str): The message generated by the assistant.
        - shared_chat (bool): Indicates whether the chat is shared or not.

        Returns:
        None
        """
        user_id = ctx.author.id
        user_name = ctx.author.name
        sql = "INSERT INTO chat (user_id, user_name, user_message, assistant_message, shared_chat) VALUES (?, ?, ?, ?, ?)"
        params = (user_id, user_name, user_message, assistant_message, shared_chat)
        try:
            self.db_conn.execute(sql, params)
            self.db_conn.commit()
        except sqlite3.Error as e:
            self.logger.error(f"An error occurred while adding a chat message to the database: {e}")

    async def database_read(self, ctx: commands.Context, shared_chat: bool) -> list:
        """
        Retrieves the user and assistant messages from the chat database for a specific user.

        Args:
            ctx (commands.Context): The context object representing the invocation context of the command.
            shared_chat (bool, optional): Flag indicating whether to retrieve messages from the shared chat or not.

        Returns:
            list: A list of dictionaries containing the user and assistant messages.

        """
        user_id = ctx.author.id
        if shared_chat:
            sql = "SELECT user_message, assistant_message FROM chat WHERE shared_chat = ? ORDER BY id DESC LIMIT 10"
            params = (shared_chat,)
        else:
            sql = "SELECT user_message, assistant_message FROM chat WHERE user_id = ? AND shared_chat = 0 ORDER BY id DESC LIMIT 10"
            params = (user_id,)
        try:
            rows = self.db_conn.execute(sql, params).fetchall()
        except sqlite3.Error as e:
            self.logger.error(f"An error occurred while reading chat messages from the database: {e}")
            return []
        messages = []
        for user_message, assistant_message in rows:
            messages.append({"role": "assistant", "content": assistant_message})
            messages.append({"role": "user", "content": user_message})
        messages.reverse()
        return messages

    async def initiateChat(self, ctx: commands.Context, user_message: str, shared_chat: bool):
        if self.FOUND_API_KEY is True:
            if user_message:
                tokens = await self.calculate_tokens(user_message)
                if not tokens > 256:
                    command = ctx.invoked_with
                    user_message = ctx.message.clean_content.split(f"{self.bot.command_prefix}{command}", 1)[1].strip()
                    for member in ctx.message.mentions:
                        user_message = user_message.replace('@' + member.mention, member.display_name)
                    conversation_history = await self.database_read(ctx, shared_chat)
                    async with ctx.typing():
                        try:
                            # Create a conversation with the system message first
                            # Then inject the 10 most recent conversation pairs
                            # Then add the user's message
                            messages = [
                                {
                                    "role": "system",
                                    "content": self.system_message
                                },
                                *conversation_history,
                                {
                                    "role": "user",
                                    "content": user_message
                                }
                            ]

                            response = await self.openai.chat.completions.create(
                                model="gpt-3.5-turbo",
                                messages=messages,
                                temperature=1,
                                max_tokens=512,
                                top_p=1,
                                frequency_penalty=0,
                                presence_penalty=0
                            )
                            chat_response = response.choices[0].message.content

                            await self.database_add(ctx, user_message, chat_response, shared_chat)

                            messages = []
                            for message in conversation_history:
                                messages.append(f"{message['role'].title()}: {message['content']}")
                            messages = "\n".join(messages)
                            self.historylogger.info(f'User {ctx.author.name} ({ctx.author.id}) initiated chat command with [message]: {user_message} [history]: {messages}.')
                            self.logger.info(f'User message: {user_message}. Chat response: {chat_response}. Used {response.usage.total_tokens} tokens in total.')
                            await ctx.reply(chat_response, silent=True)
                        except OpenAIError as e:
                            self.logger.error(f'HTTP status code: {e.http_status}, Error message: {e}')
                            await ctx.reply(f"OpenAI returned an error with the status code {e.http_status}. Please try again later.", silent=True)
                else:
                    await ctx.reply(f"Message is too long! Your message is {tokens} tokens long, but the maximum is 256 tokens.", silent=True)
            else:
                await ctx.reply("Message cannot be empty! I may be smart, but I'm not a mind reader!", silent=True)
        else:
            await ctx.reply("OpenAI API key not found. Chat commands will not work.", silent=True)

    async def initiatechatclear(self, ctx: commands.Context, shared_chat: bool):
        if shared_chat:
            sql = "DELETE FROM chat WHERE shared_chat = ?"
            params = (shared_chat,)
        else:
            user_id = ctx.author.id
            sql = "DELETE FROM chat WHERE user_id = ? AND shared_chat = 0"
            params = (user_id,)
        try:
            self.db_conn.execute(sql, params)
            self.db_conn.commit()
        except sqlite3.Error as e:
            self.logger.error(f"An error occurred while clearing the chat history: {e}")
        else:
            await ctx.reply("Chat history cleared.", silent=True)

    async def initiatechatview(self, ctx: commands.Context, shared_chat: bool):
        if shared_chat:
            conversation_history = await self.database_read(ctx, True)
        else:
            conversation_history = await self.database_read(ctx, False)
        if conversation_history:
            messages = []
            for message in conversation_history:
                messages.append(f"{message['role'].title()}: {message['content']}")
            await ctx.reply("\n".join(messages), silent=True)
        else:
            await ctx.reply("No chat history found.", silent=True)

    @commands.command(aliases=['sharedchat', 'sharedtalk', 'sc'], brief='Talk to QuantumKat in a shared chat.', description='Talk to QuantumKat in a shared chat using the OpenAI API/ChatGPT.')
    async def SharedChat(self, ctx: commands.Context, *, user_message=""):
        await self.initiateChat(ctx, user_message, True)

    @commands.command(aliases=['chat', 'talk', 'c'], brief='Talk to QuantumKat.', description='Talk to QuantumKat using the OpenAI API/ChatGPT.')
    async def Chat(self, ctx: commands.Context, *, user_message=""):
        await self.initiateChat(ctx, user_message, False)

    @commands.command(aliases=['chatclear', 'clearchat', 'cc'], brief='Clears the chat history.', description='Clears the chat history for the user that started the command.')
    async def ChatClear(self, ctx: commands.Context):
        await self.initiatechatclear(ctx, False)

    @commands.command(aliases=['sharedchatclear', 'sharedclearchat', 'scc'], brief='Clears the shared chat history.', description='Clears the shared chat history. Only server and bot owner, and mods can do this.')
    async def SharedChatClear(self, ctx: commands.Context):
        application = await self.bot.application_info()
        if (
            ctx.author.id == ctx.guild.owner.id
            or ctx.author.id == application.owner.id
            or ctx.author.guild_permissions.administrator
            or ctx.author.guild_permissions.moderate_members
        ):
            await self.initiatechatclear(ctx, True)
        else:
            await ctx.reply('Sorry, only server and bot owner, and mods can clear the sharedchat history', silent=True)

    @commands.command(aliases=['chatview', 'viewchat', 'chathistory', 'cv'], brief='View the chat history.', description='View the chat history for the user.')
    async def ChatView(self, ctx: commands.Context):
        await self.initiatechatview(ctx, False)

    @commands.command(aliases=['sharedchatview', 'sharedviewchat', 'sharedchathistory', 'scv'], brief='View the shared chat history.', description='View the shared chat history.')
    async def SharedChatView(self, ctx: commands.Context):
        await self.initiatechatview(ctx, True)

    print("Started Chat!")


async def setup(bot):
    await bot.add_cog(Chat(bot))
